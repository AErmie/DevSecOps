trigger:
  branches:
    include:
    - master 

pool:
  vmImage: "windows-latest"

parameters:
- name: MSCredScan
  displayName: Run Microsoft Credential Scanner?
  type: boolean
  default: false
- name: UnitTests
  displayName: Run Unit Tests?
  type: boolean
  default: true
- name: IntegrationTests
  displayName: Run Integration Tests?
  type: boolean
  default: true
- name: FunctionalTests
  displayName: Run Functional Tests?
  type: boolean
  default: true


variables:
  - group: SecureVariables
  - name: solution
    value: "**/*.sln"
  - name: buildPlatform
    value: "Any CPU"
  - name: buildConfiguration 
    value: "Release"


stages:
- stage: QualityCheck
  displayName: Quality Checks
  jobs:
  - ${{ if eq(parameters.MSCredScan, true) }}:
    - job: CredScanJob
      displayName: "CredScan Job"
      steps:
        - task: UseDotNet@2
          displayName: "Use .NET Core 2.2"
          inputs:
            packageType: "sdk"
            version: "2.2.x"

        - task: CredScan@2
          displayName: Execute CredScan
          inputs:
            toolMajorVersion: 'V2'
            toolVersion: 'latest'
            outputFormat: 'sarif'
            suppressionsFile: '$(Build.Repository.LocalPath)/suppressions.json'

        - task: PostAnalysis@1
          displayName: Post Analysis
          condition: always()
          inputs:
            AllTools: false
            APIScan: false
            BinSkim: false
            CodesignValidation: false
            CredScan: true
            FortifySCA: false
            FxCop: false
            ModernCop: false
            PoliCheck: false
            RoslynAnalyzers: false
            SDLNativeRules: false
            Semmle: false
            TSLint: false
            ToolLogsNotFoundAction: 'Standard'

        - task: PublishSecurityAnalysisLogs@2
          displayName: Publish Security Analysis Logs
          condition: always()
          inputs:
            ArtifactName: 'CodeAnalysisLogs'
            ArtifactType: 'Container'
            AllTools: true
            ToolLogsNotFoundAction: 'Standard'

        - task: SdtReport@1
          displayName: Create Security Analysis Report
          condition: always()
          inputs:
            AllTools: false
            APIScan: false
            BinSkim: false
            CodesignValidation: false
            CredScan: true
            FortifySCA: false
            FxCop: false
            ModernCop: false
            MSRD: false
            PoliCheck: false
            RoslynAnalyzers: false
            SDLNativeRules: false
            Semmle: false
            TSLint: false
            ToolLogsNotFoundAction: 'Standard'

  - ${{ if eq(parameters.UnitTests, true) }}:
    - job: UnitTestsJob
      displayName: "Unit Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
      
      - task: DotNetCoreCLI@2
        displayName: "Unit Tests"
        inputs:
          command: test
          projects: "**/UnitTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"

  - ${{ if eq(parameters.IntegrationTests, true) }}:
    - job: IntegrationTestsJob
      displayName: "Integration Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
      
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "Integration Tests"
        inputs:
          command: test
          projects: "**/IntegrationTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"

  - ${{ if eq(parameters.FunctionalTests, true) }}:
    - job: FunctionalTestsJob
      displayName: "Functional Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
        
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"
        
      - task: DotNetCoreCLI@2
        displayName: "Functional Tests"
        inputs:
          command: test
          projects: "**/FunctionalTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"


- stage: Build
  displayName: Build and Pack
  dependsOn: QualityCheck
  condition: succeeded()
  jobs:
  - job: BuildAndPackageJob
    displayName: "Build and Package Job"
    steps:
    - task: UseDotNet@2
      displayName: "Use .NET Core 2.2"
      inputs:
        packageType: "sdk"
        version: "2.2.x"
    
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: "restore"
        projects: "**/*.csproj"
        feedsToUse: "config"
        nugetConfigPath: "nuget.config"
      
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: "**/*.csproj"
        arguments: "--configuration $(BuildConfiguration)"

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
        zipAfterPublish: True

    # - task: PublishBuildArtifacts@1
    #   displayName: "Publish Artifact"
    #   inputs:
    #     PathtoPublish: "$(Build.ArtifactStagingDirectory)"
    #   condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: "Publish Artifact"
      condition: succeededOrFailed()
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'eShopOnWeb'
        publishLocation: 'pipeline'