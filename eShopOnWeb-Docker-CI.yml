trigger:
  - none

pool:
  vmImage: "ubuntu-latest"

variables:
  pathToDockerFile: 'Dockerfile'
  ACRConnectionName: 'AzureContainerRegistry-DevSecOps'
  ACRLoginServer: 'adinermieacr.azurecr.io'
  ACRRepository: 'eShopOnWeb'

jobs:
- job: OWASP
  displayName: "OWASP ZAP Job"
  steps:
  # - task: CmdLine@2
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #   inputs:
  #     script: |
  #       docker login -u $(registryName) -p $(registryPassword) $(registryUrl)
  #       docker build . -t $(registryUrl)/eshoponweb:$(Build.BuildId) --build-arg FEED_URL="$(feedUrl)" --build-arg FEED_ACCESSTOKEN="$(System.AccessToken)"
  #       docker tag $(registryUrl)/eshoponweb:$(Build.BuildId) $(registryUrl)/eshoponweb:latest
  #       docker push $(registryUrl)/eshoponweb

  - task: Docker@2
    displayName: Build Container
    inputs:
      containerRegistry: $(ACRConnectionName)
      repository: $(ACRRepository)
      command: build
      Dockerfile: $(pathToDockerFile)
      tags: |
        $(Build.BuildId)
        latest
  
  - bash: | 
      docker run -d -p 5000:8080 $(ACRLoginServer)/$(REPOSITORY):$(Build.BuildId)
    displayName: 'Run app in docker container'

  - task: owaspzap@1
    displayName: 'ZAP Scanner'
    inputs:
      aggressivemode: false
      scantype: 'agentScan'
      threshold: 80
      provideCustomContext: false
      port: 5000

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: 'OWASPZAP/'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      ArtifactName: 'owasp_zap_reports'

  - bash: |
      sudo npm install -g handlebars-cmd
      cat <<EOF > owaspzap/nunit-template.hbs
      {{#each site}}
      <test-run
          id="2"
          name="Owasp test"
          start-time="{{../[@generated]}}"  >
          <test-suite
              id="{{@index}}"
              type="Assembly"
              name="{{[@name]}}"
              result="Failed"
              failed="{{alerts.length}}">
              <attachments>
                  <attachment>
                      <filePath>$(Build.ArtifactStagingDirectory)/report.html</filePath>
                  </attachment>
                  <attachment>
                      <filePath>$(Build.ArtifactStagingDirectory)/report.json</filePath>
                    </attachment>
              </attachments>
          {{#each alerts}}<test-case
              id="{{@index}}"
              name="{{alert}}"
              result="Failed"
              fullname="{{alert}}"
              time="1">
                  <failure>
                      <message>
                          <![CDATA[{{{desc}}}]]>
                      </message>
                      <stack-trace>
                          <![CDATA[
      Solution:
      {{{solution}}}
      Reference:
      {{{reference}}}
      instances:{{#each instances}}
      * {{uri}}
          - {{method}}
          {{#if evidence}}- {{{evidence}}}{{/if}}
                          {{/each}}]]>
                      </stack-trace>
                  </failure>
          </test-case>
          {{/each}}
          </test-suite>
      </test-run>
      {{/each}}
      EOF
    displayName: 'owasp nunit template'
    condition: always()

  - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
    displayName: 'Generate NUnit Type File'
    condition: always()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: 'owaspzap/test-results.xml'
    condition: always()

# - job: Aqua
#   displayName: "Aqua Job"
#   steps:
  # - task: Docker@2
  #   displayName: Login to Aqua Registry
  #   inputs:
  #     containerRegistry: $(AquaServiceConnection)
  #     command: login

  # - task: Docker@1
  #   displayName: 'Pull Aqua Scanner Image'
  #   inputs:
  #     command: pull
  #     arguments: $(AquaImage)

  # - task: aquasecScanner@4
  #   displayName: 'Scan Image'
  #   inputs:
  #     image: '$(ACRLoginServer)/$(ACRRepository):$(Build.BuildId)'
  #     register: false
  #     scanType: local
  #     connection: $(AquaManagementConsoleServiceConnection)
  #     caCertificates: true
  #     scanner: '$(AquaImage)'

- job: PublishContainerImage
  displayName: "Publish Docker Image"
  dependsOn: OWASP
  condition: succeeded()
  steps:
  - task: Docker@2
    displayName: Build Container
    inputs:
      containerRegistry: $(ACRConnectionName)
      repository: $(ACRRepository)
      command: build
      Dockerfile: $(pathToDockerFile)
      tags: |
        $(Build.BuildId)
        latest

  - task: Docker@2
    displayName: Login to ACR
    inputs:
      containerRegistry: $(ACRConnectionName)
      command: login

  - task: Docker@2
    displayName: Push to ACR
    inputs:
      containerRegistry: $(ACRConnectionName)
      repository: $(ACRRepository)
      command: 'push'
      tags: |
        $(Build.BuildId)
        latest