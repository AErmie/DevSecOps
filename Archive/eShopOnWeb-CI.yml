trigger:
  branches:
    include:
    - master 

pool:
  vmImage: "windows-latest"

parameters:
- name: UnitTests
  displayName: Run Unit Tests?
  type: boolean
  default: true
- name: IntegrationTests
  displayName: Run Integration Tests?
  type: boolean
  default: true
- name: FunctionalTests
  displayName: Run Functional Tests?
  type: boolean
  default: true


variables:
  - group: SecureVariables
  - name: buildConfiguration 
    value: "Release"


stages:
- stage: QualityCheck
  displayName: Quality Checks
  jobs:
  - ${{ if and(eq(parameters.UnitTests, false), eq(parameters.IntegrationTests, false), eq(parameters.FunctionalTests, false)) }}:
    - job:
      steps:
      - script: | 
          echo "No tests selected for execution!"
        displayName: NO TESTS

  - ${{ if eq(parameters.UnitTests, true) }}:
    - job: UnitTestsJob
      displayName: "Unit Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
      
      - task: DotNetCoreCLI@2
        displayName: "Unit Tests"
        inputs:
          command: test
          projects: "**/UnitTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"

  - ${{ if eq(parameters.IntegrationTests, true) }}:
    - job: IntegrationTestsJob
      displayName: "Integration Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
      
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "Integration Tests"
        inputs:
          command: test
          projects: "**/IntegrationTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"

  - ${{ if eq(parameters.FunctionalTests, true) }}:
    - job: FunctionalTestsJob
      displayName: "Functional Test Jobs"
      steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core 2.2"
        inputs:
          packageType: "sdk"
          version: "2.2.x"
      
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"
          feedsToUse: "config"
          nugetConfigPath: "nuget.config"
        
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: "**/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"
        
      - task: DotNetCoreCLI@2
        displayName: "Functional Tests"
        inputs:
          command: test
          projects: "**/FunctionalTests.csproj"
          arguments: "--configuration $(BuildConfiguration)"


- stage: Build
  displayName: Build and Pack
  dependsOn: QualityCheck
  condition: succeeded()
  jobs:
  - job: BuildAndPackageJob
    displayName: "Build and Package Job"
    steps:
    - task: UseDotNet@2
      displayName: "Use .NET Core 2.2"
      inputs:
        packageType: "sdk"
        version: "2.2.x"
    
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: "restore"
        projects: "**/*.csproj"
        feedsToUse: "config"
        nugetConfigPath: "nuget.config"
      
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: "**/*.csproj"
        arguments: "--configuration $(BuildConfiguration)"

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
        zipAfterPublish: True

    # - task: PublishBuildArtifacts@1
    #   displayName: "Publish Artifact"
    #   inputs:
    #     PathtoPublish: "$(Build.ArtifactStagingDirectory)"
    #   condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: "Publish Artifact"
      condition: succeededOrFailed()
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'eShopOnWeb'
        publishLocation: 'pipeline'

    - task: XplatGenerateReleaseNotes@3
      inputs:
        outputfile: '$(Build.ArtifactStagingDirectory)/ReleaseNotes.md'
        templateLocation: 'File'
        templatefile: 'build-handlebars-template.md'
        checkStage: true
        overrideStageName: 'Build'
        stopOnRedeploy: false
        sortWi: false
        showOnlyPrimary: false
        searchCrossProjectForPRs: true
        # gitHubPat: 'GHPAT'
        dumpPayloadToConsole: true
        dumpPayloadToFile: false
        replaceFile: false
        getParentsAndChildren: true
        getAllParents: true
        # tags: 'sometag'
        getIndirectPullRequests: true
        stopOnError: false
    
    - task: PublishPipelineArtifact@1
      displayName: "Publish Release Notes Artifact"
      condition: succeededOrFailed()
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/ReleaseNotes.md'
        artifact: 'ReleaseNotes'
        publishLocation: 'pipeline'